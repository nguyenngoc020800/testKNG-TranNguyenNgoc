import _extends from "@babel/runtime/helpers/esm/extends";
import { datePickerValueManager } from '../DatePicker/shared';
import { useField, splitFormatIntoSections, addPositionPropertiesToSections, createDateStrFromSections } from '../internals/hooks/useField';
import { validateDate } from '../internals/hooks/validation/useDateValidation';
import { parseNonNullablePickerDate } from '../internals/utils/date-utils';
import { useUtils, useDefaultDates } from '../internals/hooks/useUtils';
var dateRangeFieldValueManager = {
  getSectionsFromValue: function getSectionsFromValue(utils, prevSections, date, format) {
    return addPositionPropertiesToSections(splitFormatIntoSections(utils, format, date));
  },
  getValueStrFromSections: function getValueStrFromSections(sections) {
    return createDateStrFromSections(sections);
  },
  getValueFromSections: function getValueFromSections(utils, prevSections, sections, format) {
    var dateStr = createDateStrFromSections(sections);
    var value = utils.parse(dateStr, format);
    return {
      value: value,
      shouldPublish: utils.isValid(value)
    };
  },
  getActiveDateFromActiveSection: function getActiveDateFromActiveSection(value) {
    return {
      value: value,
      update: function update(newActiveDate) {
        return newActiveDate;
      }
    };
  },
  hasError: function hasError(error) {
    return error != null;
  }
};

var useDefaultizedDateField = function useDefaultizedDateField(props) {
  var utils = useUtils();
  var defaultDates = useDefaultDates();
  return _extends({
    disablePast: false,
    disableFuture: false
  }, props, {
    minDate: parseNonNullablePickerDate(utils, props.minDate, defaultDates.minDate),
    maxDate: parseNonNullablePickerDate(utils, props.maxDate, defaultDates.maxDate)
  });
};

export var useDateField = function useDateField(inProps) {
  var props = useDefaultizedDateField(inProps);
  return useField({
    props: props,
    valueManager: datePickerValueManager,
    fieldValueManager: dateRangeFieldValueManager,
    // TODO: Support time validation.
    validator: validateDate
  });
};